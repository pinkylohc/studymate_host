# a sample summary return (a json with "summary" array inside), modify the schemas if u want

# schemas - summary[{type:"", content:""}]
# type: heading, subheading, point, body, code (u can add any other if you want)
# content: content of the type

# If changing the schemas (e.g. add type)
# please modify next_app/lib/summary_display.tsx, which will display the json return
# please modify next_app/action/generator/export_summary_pdf.tsx && export_summary_word.tsx, which download the json return

# you can try to submit a request in summary generator page, before modify this code to see the display sample

from typing import Dict, Any

def get_sample_markdown() -> str:
    """Returns a sample markdown summary for testing"""
    return '''# Text Analysis Summary

## Document Overview
This document contains an analysis of key programming concepts and implementations.

### Key Statistics
- Word count: 1,500
- Reading time: ~7 minutes
- Main topics covered: 3

## Main Concepts

### 1. Object-Oriented Programming
Object-Oriented Programming (OOP) is a programming paradigm based on the concept of "objects", which can contain:
- Data in the form of fields (attributes)
- Code in the form of procedures (methods)

Here's a simple example:
```python
class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
    
    def display_info(self):
        return f"{self.brand} {self.model}"
```

### 2. Functional Programming
Functional programming emphasizes:
1. Immutable data
2. Pure functions
3. First-class functions
4. Higher-order functions

### 3. Design Patterns
Common design patterns include:
| Pattern | Type | Use Case |
|---------|------|----------|
| Singleton | Creational | Single instance |
| Observer | Behavioral | Event handling |
| Factory | Creational | Object creation |

## Code Quality Metrics
- **Maintainability**: 85/100
- **Test Coverage**: 92%
- **Code Complexity**: Low

> Note: These metrics are based on standard industry measurements

## Recommendations
1. Increase test coverage to 95%
2. Add more documentation
3. Consider refactoring complex methods

---
*Generated by AI Assistant*
'''

def get_sample_response() -> str:
    """Returns a sample response with markdown content"""
    return get_sample_markdown()